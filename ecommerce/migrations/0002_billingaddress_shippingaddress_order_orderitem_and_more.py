# Generated by Django 5.2 on 2025-05-08 10:15

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('ecommerce', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BillingAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street', models.CharField(help_text='Street address.', max_length=255)),
                ('city', models.CharField(help_text='City.', max_length=100)),
                ('state', models.CharField(help_text='State or region.', max_length=100)),
                ('postal_code', models.CharField(help_text='Postal code.', max_length=20)),
                ('country', models.CharField(default='United Kingdom', help_text='Country.', max_length=100)),
                ('user', models.ForeignKey(help_text='The user associated with this address.', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_addresses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'billing address',
                'verbose_name_plural': 'billing addresses',
            },
        ),
        migrations.CreateModel(
            name='ShippingAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street', models.CharField(help_text='Street address.', max_length=255)),
                ('city', models.CharField(help_text='City.', max_length=100)),
                ('state', models.CharField(help_text='State or region.', max_length=100)),
                ('postal_code', models.CharField(help_text='Postal code.', max_length=20)),
                ('country', models.CharField(default='United Kingdom', help_text='Country.', max_length=100)),
                ('user', models.ForeignKey(help_text='The user associated with this address.', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_addresses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'shipping address',
                'verbose_name_plural': 'shipping addresses',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shipping_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Shipping cost for the order.', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('vat', models.DecimalField(decimal_places=2, default=Decimal('20.00'), help_text='VAT percentage (e.g., 20 for 20%).', max_digits=5)),
                ('discount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount percentage (e.g., 10 for 10%). Automatically set to 10% if subtotal > 600 EUR.', max_digits=5)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('shipped', 'Shipped'), ('delivered', 'Delivered'), ('cancelled', 'Cancelled')], default='pending', help_text='Current status of the order.', max_length=20)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', help_text='Payment status of the order.', max_length=20)),
                ('payment_method', models.CharField(choices=[('credit_card', 'Credit Card'), ('debit_card', 'Debit Card'), ('paypal', 'PayPal'), ('bank_transfer', 'Bank Transfer'), ('manual_payment', 'Manual Payment')], default='manual_payment', help_text='Payment method used for the order.', max_length=20)),
                ('invoice', models.FileField(blank=True, editable=False, help_text='Generated invoice PDF for the order.', null=True, upload_to='invoices/')),
                ('delivery_note', models.FileField(blank=True, editable=False, help_text='Generated delivery note PDF for the order.', null=True, upload_to='delivery_notes/')),
                ('transaction_id', models.CharField(blank=True, help_text='Transaction ID for bank transfer payments.', max_length=100)),
                ('payment_receipt', models.FileField(blank=True, help_text='Payment receipt for bank transfer payments.', upload_to='payment_receipts/')),
                ('refunded_transaction_id', models.CharField(blank=True, help_text='Transaction ID for refunded payments.', max_length=100)),
                ('refunded_payment_receipt', models.FileField(blank=True, help_text='Payment receipt for refunded payments.', upload_to='refunded_payment_receipts/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('billing_address', models.ForeignKey(help_text='Billing address for payment.', on_delete=django.db.models.deletion.PROTECT, related_name='orders_billing', to='ecommerce.billingaddress')),
                ('user', models.ForeignKey(help_text='The user associated with this order.', on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL)),
                ('shipping_address', models.ForeignKey(help_text='Shipping address for delivery.', on_delete=django.db.models.deletion.PROTECT, related_name='orders_shipping', to='ecommerce.shippingaddress')),
            ],
            options={
                'verbose_name': 'order',
                'verbose_name_plural': 'orders',
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pack_quantity', models.PositiveIntegerField()),
                ('unit_type', models.CharField(choices=[('pack', 'Pack')], default='pack', editable=False, help_text="Unit type is fixed to 'pack'.", max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='order_items', to='ecommerce.item')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='ecommerce.order')),
                ('pricing_tier', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='order_items', to='ecommerce.pricingtier')),
                ('user_exclusive_price', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orderitem_items', to='ecommerce.userexclusiveprice')),
            ],
            options={
                'verbose_name': 'order item',
                'verbose_name_plural': 'order items',
                'indexes': [models.Index(fields=['order', 'item'], name='ecommerce_o_order_i_0b16ac_idx'), models.Index(fields=['pricing_tier'], name='ecommerce_o_pricing_704473_idx'), models.Index(fields=['created_at'], name='ecommerce_o_created_9448b8_idx')],
                'unique_together': {('order', 'item', 'pricing_tier', 'pack_quantity', 'unit_type')},
            },
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['user'], name='ecommerce_o_user_id_20253d_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['created_at'], name='ecommerce_o_created_86a742_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['status'], name='ecommerce_o_status_27d41d_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['payment_status'], name='ecommerce_o_payment_c2da01_idx'),
        ),
    ]
