# Generated by Django 5.2 on 2025-05-03 18:31

import django.core.validators
import django.db.models.deletion
import django_ckeditor_5.fields
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sku', models.CharField(max_length=100, unique=True)),
                ('is_physical_product', models.BooleanField(default=False)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('weight_unit', models.CharField(blank=True, choices=[('lb', 'Pounds (lb)'), ('kg', 'Kilograms (kg)'), ('oz', 'Ounces (oz)'), ('g', 'Grams (g)')], max_length=2, null=True)),
                ('track_inventory', models.BooleanField(default=False)),
                ('stock', models.IntegerField(blank=True, null=True)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active')], default='draft', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('height', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('width', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('length', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('measurement_unit', models.CharField(blank=True, choices=[('MM', 'Millimeters'), ('CM', 'Centimeters'), ('IN', 'Inches'), ('M', 'Meters')], max_length=2, null=True)),
            ],
            options={
                'verbose_name': 'item',
                'verbose_name_plural': 'items',
            },
        ),
        migrations.CreateModel(
            name='PricingTier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tier_type', models.CharField(choices=[('pack', 'Pack'), ('pallet', 'Pallet')], max_length=10)),
                ('range_start', models.PositiveIntegerField()),
                ('range_end', models.PositiveIntegerField(blank=True, help_text="Leave blank if 'No End Range' is checked", null=True)),
                ('no_end_range', models.BooleanField(default=False, help_text='Check if this tier has no end range (e.g., X+)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'pricing tier',
                'verbose_name_plural': 'pricing tiers',
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, help_text='Total price of items in the cart (sum of item subtotals).', max_digits=12)),
                ('vat', models.DecimalField(decimal_places=2, default=Decimal('20.00'), help_text='VAT percentage (e.g., 20 for 20%).', max_digits=5)),
                ('discount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount percentage (e.g., 10 for 10%). Automatically set to 10% if subtotal > 600 EUR.', max_digits=5)),
                ('total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, help_text='Total after applying VAT and discount (subtotal + VAT - discount).', max_digits=12)),
                ('user', models.OneToOneField(help_text='The user associated with this cart.', on_delete=django.db.models.deletion.CASCADE, related_name='cart', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'cart',
                'verbose_name_plural': 'carts',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly identifier, auto-generated if blank', max_length=255, unique=True)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='category_images/')),
                ('slider_image', models.ImageField(blank=True, help_text='Optional image for slider display', null=True, upload_to='category_slider_images/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'category',
                'verbose_name_plural': 'categories',
                'indexes': [models.Index(fields=['name'], name='ecommerce_c_name_f3a40e_idx'), models.Index(fields=['slug'], name='ecommerce_c_slug_53629f_idx'), models.Index(fields=['created_at'], name='ecommerce_c_created_17ce26_idx')],
            },
        ),
        migrations.CreateModel(
            name='ItemImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='item_images/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='ecommerce.item')),
            ],
            options={
                'verbose_name': 'item image',
                'verbose_name_plural': 'item images',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('shipped', 'Shipped'), ('delivered', 'Delivered'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('shipping_address', models.TextField()),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('payment_method', models.CharField(blank=True, max_length=100)),
                ('transaction_id', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'order',
                'verbose_name_plural': 'orders',
            },
        ),
        migrations.CreateModel(
            name='PricingTierData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, help_text='Price per unit', max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pricing_tier_data', to='ecommerce.item')),
                ('pricing_tier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pricing_data', to='ecommerce.pricingtier')),
            ],
            options={
                'verbose_name': 'pricing tier data',
                'verbose_name_plural': 'pricing tier data',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly identifier, auto-generated if blank', max_length=255)),
                ('description', django_ckeditor_5.fields.CKEditor5Field()),
                ('is_new', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='ecommerce.category')),
            ],
            options={
                'verbose_name': 'product',
                'verbose_name_plural': 'products',
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='product_images/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='ecommerce.product')),
            ],
            options={
                'verbose_name': 'product image',
                'verbose_name_plural': 'product images',
            },
        ),
        migrations.CreateModel(
            name='ProductVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('units_per_pack', models.PositiveIntegerField(default=6, help_text='Number of units per pack')),
                ('units_per_pallet', models.PositiveIntegerField(default=0, help_text='Number of units per pallet')),
                ('show_units_per', models.CharField(choices=[('pack', 'Pack'), ('both', 'Both (Pack & Pallet)')], default='pack', max_length=10)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active')], default='draft', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_variants', to='ecommerce.product')),
            ],
            options={
                'verbose_name': 'product variant',
                'verbose_name_plural': 'product variants',
            },
        ),
        migrations.AddField(
            model_name='pricingtier',
            name='product_variant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pricing_tiers', to='ecommerce.productvariant'),
        ),
        migrations.AddField(
            model_name='item',
            name='product_variant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='ecommerce.productvariant'),
        ),
        migrations.CreateModel(
            name='TableField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('field_type', models.CharField(choices=[('text', 'Text'), ('number', 'Number'), ('image', 'Image')], db_index=True, max_length=20)),
                ('long_field', models.BooleanField(default=False, help_text='Check if this field requires more display space (e.g., for long text)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product_variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='table_fields', to='ecommerce.productvariant')),
            ],
            options={
                'verbose_name': 'table field',
                'verbose_name_plural': 'table fields',
            },
        ),
        migrations.CreateModel(
            name='ItemData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value_text', models.TextField(blank=True, null=True)),
                ('value_number', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('value_image', models.ImageField(blank=True, null=True, upload_to='item_data_images/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_entries', to='ecommerce.item')),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_values', to='ecommerce.tablefield')),
            ],
            options={
                'verbose_name': 'item data',
                'verbose_name_plural': 'item data',
            },
        ),
        migrations.CreateModel(
            name='UserExclusivePrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discount_percentage', models.DecimalField(decimal_places=2, help_text='Discount percentage', max_digits=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce.item')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user exclusive price',
                'verbose_name_plural': 'user exclusive prices',
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('unit_type', models.CharField(choices=[('pack', 'Pack'), ('pallet', 'Pallet')], default='pack', max_length=10)),
                ('per_unit_price', models.DecimalField(decimal_places=2, help_text='Price per unit from PricingTierData', max_digits=12)),
                ('per_pack_price', models.DecimalField(decimal_places=2, help_text='Price per pack (price per unit * units per pack)', max_digits=12)),
                ('total_cost', models.DecimalField(decimal_places=2, help_text='Total cost before discounts (per pack price * quantity or adjusted for pallet)', max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='order_items', to='ecommerce.item')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='ecommerce.order')),
                ('pricing_tier', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='order_items', to='ecommerce.pricingtier')),
                ('user_exclusive_price', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orderitem_items', to='ecommerce.userexclusiveprice')),
            ],
            options={
                'verbose_name': 'order item',
                'verbose_name_plural': 'order items',
            },
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('unit_type', models.CharField(choices=[('pack', 'Pack'), ('pallet', 'Pallet')], default='pack', max_length=10)),
                ('per_unit_price', models.DecimalField(decimal_places=2, help_text='Price per unit from PricingTierData', max_digits=12)),
                ('per_pack_price', models.DecimalField(decimal_places=2, help_text='Price per pack (price per unit * units per pack)', max_digits=12)),
                ('total_cost', models.DecimalField(decimal_places=2, help_text='Total cost after user_exclusive_price discount', max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='ecommerce.cart')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='cart_items', to='ecommerce.item')),
                ('pricing_tier', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='cart_items', to='ecommerce.pricingtier')),
                ('user_exclusive_price', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cartitem_items', to='ecommerce.userexclusiveprice')),
            ],
            options={
                'verbose_name': 'cart item',
                'verbose_name_plural': 'cart items',
            },
        ),
        migrations.AddIndex(
            model_name='cart',
            index=models.Index(fields=['user'], name='ecommerce_c_user_id_530d5a_idx'),
        ),
        migrations.AddIndex(
            model_name='cart',
            index=models.Index(fields=['created_at'], name='ecommerce_c_created_66f54a_idx'),
        ),
        migrations.AddIndex(
            model_name='itemimage',
            index=models.Index(fields=['item'], name='ecommerce_i_item_id_c1583a_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['user', 'status'], name='ecommerce_o_user_id_f28879_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['created_at'], name='ecommerce_o_created_86a742_idx'),
        ),
        migrations.AddIndex(
            model_name='pricingtierdata',
            index=models.Index(fields=['item', 'pricing_tier'], name='ecommerce_p_item_id_b5e459_idx'),
        ),
        migrations.AddIndex(
            model_name='pricingtierdata',
            index=models.Index(fields=['created_at'], name='ecommerce_p_created_c6dc28_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='pricingtierdata',
            unique_together={('item', 'pricing_tier')},
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category', 'name'], name='ecommerce_p_categor_65b574_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['created_at'], name='ecommerce_p_created_281ad5_idx'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['product'], name='ecommerce_p_product_378eb9_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['product', 'name'], name='ecommerce_p_product_e53093_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['created_at'], name='ecommerce_p_created_f8801d_idx'),
        ),
        migrations.AddIndex(
            model_name='pricingtier',
            index=models.Index(fields=['product_variant', 'tier_type'], name='ecommerce_p_product_6b2c9c_idx'),
        ),
        migrations.AddIndex(
            model_name='pricingtier',
            index=models.Index(fields=['created_at'], name='ecommerce_p_created_d71c9a_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['product_variant'], name='ecommerce_i_product_b8852f_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['sku'], name='ecommerce_i_sku_18061a_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['status'], name='ecommerce_i_status_ecb28b_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['created_at'], name='ecommerce_i_created_585e1c_idx'),
        ),
        migrations.AddIndex(
            model_name='tablefield',
            index=models.Index(fields=['product_variant', 'name'], name='ecommerce_t_product_8c847c_idx'),
        ),
        migrations.AddIndex(
            model_name='tablefield',
            index=models.Index(fields=['field_type'], name='ecommerce_t_field_t_8e7a25_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='tablefield',
            unique_together={('product_variant', 'name')},
        ),
        migrations.AddIndex(
            model_name='itemdata',
            index=models.Index(fields=['item', 'field'], name='ecommerce_i_item_id_9a9101_idx'),
        ),
        migrations.AddIndex(
            model_name='itemdata',
            index=models.Index(fields=['created_at'], name='ecommerce_i_created_60edab_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='itemdata',
            unique_together={('item', 'field')},
        ),
        migrations.AddIndex(
            model_name='userexclusiveprice',
            index=models.Index(fields=['user', 'item'], name='ecommerce_u_user_id_00014c_idx'),
        ),
        migrations.AddIndex(
            model_name='userexclusiveprice',
            index=models.Index(fields=['created_at'], name='ecommerce_u_created_a54292_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userexclusiveprice',
            unique_together={('user', 'item')},
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['order', 'item'], name='ecommerce_o_order_i_0b16ac_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['pricing_tier'], name='ecommerce_o_pricing_704473_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['created_at'], name='ecommerce_o_created_9448b8_idx'),
        ),
        migrations.AddIndex(
            model_name='cartitem',
            index=models.Index(fields=['cart', 'item'], name='ecommerce_c_cart_id_289d39_idx'),
        ),
        migrations.AddIndex(
            model_name='cartitem',
            index=models.Index(fields=['pricing_tier'], name='ecommerce_c_pricing_d2c384_idx'),
        ),
        migrations.AddIndex(
            model_name='cartitem',
            index=models.Index(fields=['created_at'], name='ecommerce_c_created_c03a7d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='cartitem',
            unique_together={('cart', 'item', 'pricing_tier', 'unit_type')},
        ),
    ]
